import subprocess
import json
import os
import sys
import shutil
from pathlib import Path

from common import ROOT, log

# –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
PROXY_FILE = ROOT / "common" / "proxy_port.txt"

# –ü–∞–ø–∫–∞, –≤ –∫–æ—Ç–æ—Ä—É—é —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
OUTPUT_DIR = ROOT / "temp"
OUTPUT_DIR.mkdir(exist_ok=True)

# –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å ffmpeg –≤ PATH ‚Äî –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –Ω–∞–ø—Ä—è–º—É—é
CUSTOM_FFMPEG_PATH = ROOT / r'common\ffmpeg-7.1.1-essentials_build\bin\ffmpeg.exe'


def sanitize_filename(name: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–æ—Ä–º–∞—Ç.
    """
    return "".join(c if c.isalnum() or c in " ._-()" else "_" for c in name)


def get_ffmpeg_path() -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –¥–æ ffmpeg. –ï—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É.
    """
    if CUSTOM_FFMPEG_PATH and Path(CUSTOM_FFMPEG_PATH).exists():
        return str(Path(CUSTOM_FFMPEG_PATH))
    path = shutil.which("ffmpeg")
    if not path:
        raise RuntimeError(
            "‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "üëâ –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ —Å https://www.gyan.dev/ffmpeg/builds/\n"
            "–∏–ª–∏ –ø—Ä–æ–ø–∏—à–∏ –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é CUSTOM_FFMPEG_PATH."
        )
    return path


def download_youtube_video(url: str, mode: str = "video", verbose: bool = False) -> tuple[str, str, str]:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç YouTube-–≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ yt-dlp —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏.

    :param url: –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
    :param mode: 'video' (mp4) –∏–ª–∏ 'audio' (mp3)
    :param verbose: –í—ã–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ –ª–æ–≥–∏ yt-dlp
    :return: (title, author, –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
    """
    assert mode in ("video", "audio")

    ffmpeg_path = get_ffmpeg_path()
    env = os.environ.copy()
    if CUSTOM_FFMPEG_PATH:
        ffmpeg_dir = str(Path(CUSTOM_FFMPEG_PATH).parent)
        env["PATH"] = ffmpeg_dir + os.pathsep + env["PATH"]

    with open(PROXY_FILE, 'r') as f:
        proxy = f"http://{f.read().strip()}"
    log.debug(f'get proxy: {proxy}')
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä –∏ —Ç.–¥.)
    info_proc = subprocess.run(
        [sys.executable, "-m", "yt_dlp", "--proxy", proxy, "-j", url],
        capture_output=True,
        text=True,
        env=env
    )
    if info_proc.returncode != 0:
        log.error(f"[yt-dlp] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:\n{info_proc.stderr.strip()}")
        raise RuntimeError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

    info = json.loads(info_proc.stdout)
    title = sanitize_filename(info.get("title", "unknown_video"))
    author = info.get("uploader") or info.get("channel") or "unknown"
    base_output = OUTPUT_DIR / title

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–≥—Ä—É–∑–∫–∏
    output_template = f"{base_output}.%(ext)s"
    cmd = [
        sys.executable, "-m", "yt_dlp",
        "--proxy", proxy,
        "--no-playlist",
        "-o", output_template,
        "--quiet",
        "--no-warnings",
        "--progress"
    ]

    if mode == "video":
        cmd += ["-f", "bv[height<=1080]+ba", "--merge-output-format", "mp4"]
    else:
        cmd += ["-f", "bestaudio", "--extract-audio", "--audio-format", "mp3"]

    cmd.append(url)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if verbose:
        log.debug(f"[yt-dlp] run: {' '.join(cmd)}")
        subprocess.run(cmd, check=True, env=env)
    else:
        subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, env=env)

    ext = "mp4" if mode == "video" else "mp3"
    final_path = base_output.with_suffix(f".{ext}").resolve()

    log.info(f"Saved to: {final_path}")
    return title, author, str(final_path)


if __name__ == "__main__":
    video_url = 'https://www.youtube.com/watch?v=ZDmUSt4gt-g'
    title, author, path = download_youtube_video(video_url, mode="audio", verbose=True)
    print(f"Title: {title}\nAuthor: {author}\nSaved to: {path}")
